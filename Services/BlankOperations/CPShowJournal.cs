using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;


using LSRetailPosis.DataAccess;
using LSRetailPosis.Transaction;
using Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;
using DE = Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;



namespace Microsoft.Dynamics.Retail.Pos.BlankOperations
{
    public partial class CPShowJournal : Form
    {
        IPosTransaction posTransaction;

        private System.Data.DataTable transactions;
        public CPShowJournal(IPosTransaction _posTransaction)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //transactions = this.GetJournalData();
            posTransaction = _posTransaction;
            

        }

        private void CPShowJournal_Load_1(object sender, EventArgs e)
        {
            transactions = this.GetJournalData();
            //gridControl1.DataSource = transactions;
        }

        public DataTable GetJournalData()
        {
            DataTable dataTable;
            SqlConnection connection = LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection;

            using (SqlCommand sqlCommand = new SqlCommand())
            {
                DataTable dataTable1 = new DataTable();
                try
                {
                    string queryString = @" SELECT top 10 TRANSACTIONID, CPNOORDER, CPNAMEORDER ,CPDATEORDER FROM ax.[RetailTransactionTable]  ";

                    using (SqlCommand command = new SqlCommand(queryString, connection))
                    {

                        if (connection.State != ConnectionState.Open)
                        {
                            connection.Open();
                        }
                        using (SqlDataReader reader = sqlCommand.ExecuteReader())
                        {

                            dataTable1.Load(reader);
                        }
                    }
                }
                finally
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }
                }
                dataTable = dataTable1;
            }
            return dataTable;
        }
    }
}
