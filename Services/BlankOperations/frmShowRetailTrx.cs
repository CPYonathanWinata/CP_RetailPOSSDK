using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using LSRetailPosis.DataAccess;
using System.Data.SqlClient;
using LSRetailPosis.Transaction;
using Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;
using DE = Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;

namespace Microsoft.Dynamics.Retail.Pos.BlankOperations
{
    public partial class frmShowRetailTrx : Form
    {
        IPosTransaction posTransaction;
        private System.Data.DataTable transactions;
        public frmShowRetailTrx(IPosTransaction _posTransaction)
        {
            InitializeComponent();
            posTransaction = _posTransaction;
            // This line of code is generated by Data Source Configuration Wizard
            //retailtransactiontableTableAdapter3.Fill(jbenhL1StoresDataSet3.RETAILTRANSACTIONTABLE);

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            lblSummary.Text = "";
            lblSummary2.Text = "";
            lblSummary3.Text = "";
            lblSummary4.Text = "";

            dtpFrom.Value = DateTime.Now.AddDays(-7);
            transactions = this.getQuery(DateTime.Now.AddDays(-7), DateTime.Now);
            this.getSummary(DateTime.Now.AddDays(-7), DateTime.Now);
            dataGridView1.DataSource = transactions;
            dataGridView1.ReadOnly = true;
        }

        public void getSummary(DateTime date_from, DateTime date_to)
        {
            lblSummary.Text = "";
            lblSummary2.Text = "";
            lblSummary3.Text = "";
            lblSummary4.Text = "";

            SqlConnection connection = LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection;
            try
            {

                string queryString = @" SELECT 
                                            'Rp ' + REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, SUM(c.AMOUNTMST)), 1), '.00', '') AS [Payment Amount],
	                                        CASE 
		                                        WHEN c.TENDERTYPE = 1 THEN 'Cash'
		                                        WHEN c.TENDERTYPE = 2 THEN 'Gift Card'
		                                        WHEN c.TENDERTYPE = 3 THEN 'Cards'
		                                        WHEN c.TENDERTYPE = 4 THEN 'Loyalty Card'
		                                        WHEN c.TENDERTYPE = 5 THEN 'TenderPayment'
		                                        WHEN c.TENDERTYPE = 6 THEN 'Other Card'
                                                WHEN c.TENDERTYPE = 14 THEN 'Ezeelink Card'
		                                        ELSE
			                                        b.TenderName	
	                                        END as [Tender Name]   
                                        FROM 
                                            AX.[RETAILTRANSACTIONTABLE] a
                                            LEFT JOIN AX.[CPNEWPAYMENTPOS] b ON a.TRANSACTIONID = b.TransactionID
	                                        LEFT JOIN AX.[RETAILTRANSACTIONPAYMENTTRANS] c on a.TRANSACTIONID = c.TRANSACTIONID
                                        WHERE 
                                            a.RECEIPTID  != '' AND 
                                            TYPE = 2 AND
                                            a.TRANSDATE BETWEEN @from AND @to
                                        GROUP BY
                                            CASE 
		                                        WHEN c.TENDERTYPE = 1 THEN 'Cash'
		                                        WHEN c.TENDERTYPE = 2 THEN 'Gift Card'
		                                        WHEN c.TENDERTYPE = 3 THEN 'Cards'
		                                        WHEN c.TENDERTYPE = 4 THEN 'Loyalty Card'
		                                        WHEN c.TENDERTYPE = 5 THEN 'TenderPayment'
		                                        WHEN c.TENDERTYPE = 6 THEN 'Other Card'
                                                WHEN c.TENDERTYPE = 14 THEN 'Ezeelink Card'
		                                        ELSE
			                                        b.TenderName	
	                                        END ";

                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.AddWithValue("@from", date_from.AddDays(-1));
                    command.Parameters.AddWithValue("@to", date_to);
                    
                    if (connection.State != ConnectionState.Open)
                    {
                        connection.Open();
                    }
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        lblSummary.Text = "Summary Retail Transaction" + Environment.NewLine;
                        lblSummary2.Text = Environment.NewLine;
                        lblSummary3.Text = Environment.NewLine;
                        lblSummary4.Text = Environment.NewLine;
                        int count = 1;

                        while(reader.Read())
                        {
                            if(count <= 5)
                                lblSummary.Text += reader[1].ToString().PadRight(15, ' ') + " : " + reader[0] + Environment.NewLine;
                            else if (count <= 10)
                                lblSummary2.Text += reader[1].ToString().PadRight(15, ' ') + " : " + reader[0] + Environment.NewLine;
                            else if (count <= 15)
                                lblSummary3.Text += reader[1].ToString().PadRight(15, ' ') + " : " + reader[0] + Environment.NewLine;
                            else
                                lblSummary4.Text += reader[1].ToString().PadRight(15, ' ') + " : " + reader[0] + Environment.NewLine;

                            count++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LSRetailPosis.ApplicationExceptionHandler.HandleException(this.ToString(), ex);
                throw;
            }
            finally
            {
                if (connection.State != ConnectionState.Closed)
                {
                    connection.Close();
                }
            }
        }

        public DataTable getQuery(DateTime date_from, DateTime date_to)
        {
            DataTable dataTable;
            SqlConnection connection = LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection;
            try
            {

                string queryString = @" SELECT 
                                            a.CREATEDDATETIME AS [Date],
                                            a.STAFF as [Operator ID],
                                            a.TERMINAL as [Register],
                                            a.RECEIPTID as [Receipt], 
                                            'Sale' as [Type], 
                                            STR(GROSSAMOUNT * -1 ,16,0) AS [Amount] ,
                                            'Rp ' + REPLACE(CONVERT(VARCHAR, CONVERT(MONEY, c.AMOUNTMST), 1), '.00', '') AS [Payment Amount],
	                                        b.NoReffTransaction as [Reference Number],
	                                        CASE 
		                                        WHEN c.TENDERTYPE = 1 THEN 'Cash'
		                                        WHEN c.TENDERTYPE = 2 THEN 'Gift Card'
		                                        WHEN c.TENDERTYPE = 3 THEN 'Cards'
		                                        WHEN c.TENDERTYPE = 4 THEN 'Loyalty Card'
		                                        WHEN c.TENDERTYPE = 5 THEN 'TenderPayment'
		                                        WHEN c.TENDERTYPE = 6 THEN 'Other Card'
                                                WHEN c.TENDERTYPE = 14 THEN 'Ezeelink Card'
		                                        ELSE
			                                        b.TenderName	
	                                        END as [Tender Name],
	                                        b.PurchaserName as [Purchaser Name]     
                                        FROM 
                                            AX.[RETAILTRANSACTIONTABLE] a
                                            LEFT JOIN AX.[CPNEWPAYMENTPOS] b ON a.TRANSACTIONID = b.TransactionID
	                                        LEFT JOIN AX.[RETAILTRANSACTIONPAYMENTTRANS] c on a.TRANSACTIONID = c.TRANSACTIONID
                                        WHERE 
                                            a.RECEIPTID  != '' AND 
                                            TYPE = 2 AND
                                            a.TRANSDATE BETWEEN @from AND @to
                                        ORDER BY 
                                            a.CREATEDDATETIME DESC ";

                /*
                 CPNOORDER as [No Order],
                CPNAMEORDER as [Name Order],
                CPDATEORDER as [Date Order] 
                 */
                //    WHERE TRANSACTIONID =  @TRANSACTIONID  ";

                using (SqlCommand command = new SqlCommand(queryString, connection))
                {
                    command.Parameters.AddWithValue("@from", date_from.AddDays(-1));
                    command.Parameters.AddWithValue("@to", date_to);

                    DataTable dataTable1 = new DataTable();
                    // command.Parameters.AddWithValue("@TRANSACTIONID", posTransaction.TransactionId);

                    if (connection.State != ConnectionState.Open)
                    {
                        connection.Open();
                    }
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        dataTable1.Load(reader);
                      
                        dataTable = dataTable1;
                    }
                }


            }
            catch (Exception ex)
            {
                LSRetailPosis.ApplicationExceptionHandler.HandleException(this.ToString(), ex);
                throw;
            }
            finally
            {
                if (connection.State != ConnectionState.Closed)
                {
                    connection.Close();
                }
            }
            return dataTable;
        }

        public DataTable GetJournalData()
        {
            DataTable dataTable;
            SqlConnection connection = LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection;

            using (SqlCommand sqlCommand = new SqlCommand())
            {
                DataTable dataTable1 = new DataTable();
                try
                {
                    string queryString = @" SELECT top 10 TRANSACTIONID, CPNOORDER, CPNAMEORDER ,CPDATEORDER FROM ax.[RetailTransactionTable]  ";

                    using (SqlCommand command = new SqlCommand(queryString, connection))
                    {

                        if (connection.State != ConnectionState.Open)
                        {
                            connection.Open();
                        }
                        using (SqlDataReader reader = sqlCommand.ExecuteReader())
                        {

                            dataTable1.Load(reader);
                        }
                    }
                }
                finally
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }
                }
                dataTable = dataTable1;
            }
            return dataTable;
        }

        private void btnFilter_Click(object sender, EventArgs e)
        {
            if(dtpTo.Value < dtpFrom.Value)
            {
                MessageBox.Show("Date To must equal or later than Date From", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                dtpTo.Value = dtpFrom.Value;
                return;
            }

            transactions = this.getQuery(dtpFrom.Value, dtpTo.Value);
            this.getSummary(dtpFrom.Value, dtpTo.Value);
            dataGridView1.DataSource = transactions;
        }

        private void timer_location_Tick(object sender, EventArgs e)
        {
            lblSummary.Top = this.Height - (lblSummary.Height + 50);
            lblSummary.Left = 0;

            lblSummary2.Top = this.Height - (lblSummary.Height + 50);
            lblSummary2.Left = lblSummary.Width + 50;

            lblSummary3.Top = this.Height - (lblSummary.Height + 50);
            lblSummary3.Left = (lblSummary.Width + 50) + lblSummary2.Width + 50;

            lblSummary4.Top = this.Height - (lblSummary.Height + 50);
            lblSummary4.Left = ((lblSummary.Width + 50) + lblSummary2.Width + 50) + lblSummary3.Width + 50;
        }

      
    }
}
