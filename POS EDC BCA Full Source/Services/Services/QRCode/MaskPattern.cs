/*
SAMPLE CODE NOTICE

THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED, 
OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.  
THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.  
NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
*/


namespace Microsoft.Dynamics.Retail.Pos.Qrcode
{
    /// <summary>
    /// The mask pattern is generated by defining as dark any module in the
    /// encoding region (excluding the area reserved for Format Information and
    /// the Version Information) for which the condition is true.
    /// </summary>
    internal abstract class MaskPattern
    {
        public delegate bool ConditionDelegate(int x, int y);

        public const int NumberOfPatterns = 8;

        /// <summary>
        /// The eight Mask Patterns.
        /// </summary>
        public static readonly MaskPattern[] Patterns = { 
            new P000(), new P001(), new P010(), new P011(), new P100(), new P101(), new P110(), new P111()
        };

        /// <summary>
        /// The eight Mask Pattern References.
        /// </summary>
        public enum Reference
        {
            R000, R001, R010, R011, R100, R101, R110, R111
        }

        public abstract Reference Ref { get; }

        public abstract bool Condition(int x, int y);

        #region Mask Patterns

        public class P000 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R000; } }

            public override bool Condition(int x, int y)
            {
                return (x + y) % 2 == 0;
            }
        }

        public class P001 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R001; } }

            public override bool Condition(int x, int y)
            {
                return x % 2 == 0;
            }
        }

        public class P010 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R010; } }

            public override bool Condition(int x, int y)
            {
                return y % 3 == 0;
            }
        }

        public class P011 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R011; } }

            public override bool Condition(int x, int y)
            {
                return (x + y) % 3 == 0;
            }
        }

        public class P100 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R100; } }

            public override bool Condition(int x, int y)
            {
                return ((x / 2) + (y / 3)) % 2 == 0;
            }
        }

        public class P101 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R101; } }

            public override bool Condition(int x, int y)
            {
                return ((x * y) % 2) + ((x * y) % 3) == 0;
            }
        }

        public class P110 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R110; } }

            public override bool Condition(int x, int y)
            {
                return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
            }
        }

        public class P111 : MaskPattern
        {
            public override Reference Ref { get { return Reference.R111; } }

            public override bool Condition(int x, int y)
            {
                return (((x * y) % 3) + (x + y) % 2) % 2 == 0;
            }
        }

        #endregion
    }
}
