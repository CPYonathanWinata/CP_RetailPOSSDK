using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;

using System.Net;
using System.IO;
using System.Web;
using System.Web.Script.Serialization;
using System.Text.RegularExpressions;

using System.Threading.Tasks;
using System.Windows.Forms;
using LSRetailPosis.DataAccess;
using System.Data.SqlClient;
using LSRetailPosis.Transaction;
using Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;
using DE = Microsoft.Dynamics.Retail.Pos.Contracts.DataEntity;
using LSRetailPosis.Settings;

using LSRetailPosis.POSProcesses;

using System.Drawing.Printing;

//End Add NEC-Hamzah
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;

using System.Configuration;

namespace Microsoft.Dynamics.Retail.Pos.BlankOperations
{
    public partial class CPLoveInquiry : Form
    {
        IPosTransaction posTransaction;
        private System.Data.DataTable transactions;
        int Offset = 0;
        const string LV_ZREPORT_URL = BlankOperations.LV_ZREPORT_URL;
        const string LV_REPORT_URL = BlankOperations.LV_REPORT_URL;
        const string USER_AGENT = BlankOperations.USER_AGENT;

        string downLine1 = "";
        string downLine2 = "";
        string downLine3 = "";
        string amount_pay = "";
        string amount_fee = "";
        string amount_tpt = "";
        string amount_total_pay = "";        
        string amount_setor = "";


        public CPLoveInquiry(IPosTransaction _posTransaction)
        {
            InitializeComponent();
            posTransaction = _posTransaction;
            // This line of code is generated by Data Source Configuration Wizard
            //retailtransactiontableTableAdapter3.Fill(jbenhL1StoresDataSet3.RETAILTRANSACTIONTABLE);

        }

    /*    public CPPayECR(IPosTransaction _posTransaction)
        {
            InitializeComponent();
            posTransaction = _posTransaction;
            // This line of code is generated by Data Source Configuration Wizard
            //retailtransactiontableTableAdapter3.Fill(jbenhL1StoresDataSet3.RETAILTRANSACTIONTABLE);

        }
     * */

        private void Form1_Load(object sender, EventArgs e)
        {
            lblSummary.Text = "";
            lblSummary2.Text = "";
            lblSummary3.Text = "";
            lblSummary4.Text = "";

            dtpFrom.Value = DateTime.Now;
            dtpTo.Value = DateTime.Now;
 
            transactions = this.getData(DateTime.Now, DateTime.Now);
         //   this.getSummary(DateTime.Now.AddDays(-7), DateTime.Now);
            this.getSummary(DateTime.Now, DateTime.Now);
            dataGridView1.DataSource = transactions;
            dataGridView1.ReadOnly = true;

            dataGridView1.AutoResizeColumns();
            dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
        }

        public class Payment
        {
            public string transaction_id { get; set; }
            public string payment_code { get; set; }
            public string store_code { get; set; }
            public string data_area { get; set; }
            public string terminal_id { get; set; }
            public string request_time { get; set; }
            public DateTime? response_time { get; set; }
            public string amount { get; set; }
            public string admin_fee { get; set; }
            public string total_amount { get; set; }
            public string customer_name { get; set; }
            public string reference_no { get; set; }
            public object additional_info { get; set; }
            public int? pay_id { get; set; }
            public string created_at { get; set; }
            public string updated_at { get; set; }
            public string token { get; set; }
            public string message { get; set; }
            public string operator_id { get; set; }
            public int? send_AX { get; set; }
        }

        public class Tpt
        {
            public string store_code { get; set; }
            public string data_area { get; set; }
            public string terminal_id { get; set; }
            public string operator_id { get; set; }
            public string request_time { get; set; }
            public DateTime? response_time { get; set; }
            public string transaction_id { get; set; }
            public string amount { get; set; }
            public string fee { get; set; }
            public string ext_ref { get; set; }
            public string trans_amount_currency { get; set; }
            public string trans_amount_usd { get; set; }
            public string receiver_name { get; set; }
            public string receiver_gender { get; set; }
            public string receiver_phone_number { get; set; }
            public string receiver_identity_type { get; set; }
            public string receiver_identity_number { get; set; }
            public string receiver_identity_exp { get; set; }
            public string receiver_address { get; set; }
            public string receiver_dob { get; set; }
            public string receiver_pob { get; set; }
            public string receiver_purpose { get; set; }
            public string receiver_occupation { get; set; }
            public string receiver_postal_code { get; set; }
            public string receiver_district { get; set; }
            public string receiver_sub_district { get; set; }
            public string receiver_identity_picture { get; set; }
            public string receiver_signature_picture { get; set; }
            public string receiver_selfie_picture { get; set; }
            public string mtcn_code { get; set; }
            public object token { get; set; }
            public int? tpt_id { get; set; }
            public int? send_AX { get; set; }
            public string created_at { get; set; }
            public string updated_at { get; set; }
        }

        public class Root
        {
            public List<Payment> payment { get; set; }
            public List<Tpt> tpt { get; set; }
        }

        public DataTable getData(DateTime date_from, DateTime date_to)
        {
            string responseCode = "0";
            string terminalId   = ApplicationSettings.Database.TerminalID;
            string store_code   = ApplicationSettings.Database.StoreID;
            string from_date    = "";
            string to_date      = "";

            DataTable dt = new DataTable();

            lblSummary.Text = "";
            lblSummary2.Text = "";
            lblSummary3.Text = "";
            lblSummary4.Text = "";

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls |
                                             SecurityProtocolType.Tls11 |
                                             SecurityProtocolType.Tls12;

            string reqCheckUrl = LV_REPORT_URL;

            ASCIIEncoding encoder = new ASCIIEncoding();
            byte[] data = encoder.GetBytes("");

            HttpWebRequest reqCheck = (HttpWebRequest)WebRequest.Create(reqCheckUrl);
            reqCheck.Method = "POST";
            reqCheck.Credentials = CredentialCache.DefaultCredentials;
            reqCheck.Accept = "text/json";

            reqCheck.Headers["Authorization"] = "PFM";

            reqCheck.UserAgent = USER_AGENT;
            reqCheck.ContentType = "application/json";

            string requestBody = string.Format("{{\"store_code\":\"{0}\",\"data_area\":\"{1}\",\"terminal_id\":\"{2}\",\"from_date\":\"{3}\",\"to_date\":\"{4}\",\"operator_id\":\"{5}\"}}", ApplicationSettings.Database.StoreID, ApplicationSettings.Database.DATAAREAID, terminalId, date_from.ToString("yyyy-MM-dd"), date_to.ToString("yyyy-MM-dd"), ApplicationSettings.Terminal.TerminalOperator.OperatorId);
            byte[] byteArray = Encoding.UTF8.GetBytes(requestBody);

            Stream requestStream = reqCheck.GetRequestStream();
            requestStream.Write(byteArray, 0, byteArray.Length);
            requestStream.Close();

            using (HttpWebResponse resp = (HttpWebResponse)reqCheck.GetResponse())
            {
                string content = string.Empty;
                using (var stream = resp.GetResponseStream())
                {
                    using (var sr = new StreamReader(stream))
                    {
                        content = sr.ReadToEnd();
                    }
                }
              
                JavaScriptSerializer serializer = new JavaScriptSerializer();
       
                Root myDeserializedClass = new JavaScriptSerializer().Deserialize<Root>(content);
               
                dt.Columns.Add("TransactionID");
                dt.Columns.Add("TransDate");
                dt.Columns.Add("KodeBayar");
                dt.Columns.Add("RefNo");
                dt.Columns.Add("CustName");
                dt.Columns.Add("AmountPayment");
                dt.Columns.Add("AmountFee");
                dt.Columns.Add("TotalAmount");
                dt.Columns.Add("KodeTPT");
                dt.Columns.Add("TPTRefNo");
                dt.Columns.Add("ReceiverName");
                dt.Columns.Add("AmountTPT");

                DataRow dr = null;

              

                if (myDeserializedClass.payment != null)
                {                
                    foreach (var item in myDeserializedClass.payment)
                    {
                        dr = dt.NewRow(); // have new row on each iteration
                        dr["TransactionID"] = item.transaction_id;
                        dr["TransDate"] = item.created_at;
                        dr["KodeBayar"] = item.payment_code;
                        dr["RefNo"] = item.reference_no;
                        dr["CustName"] = item.customer_name;
                        dr["AmountPayment"] = item.amount;
                        dr["AmountFee"] = item.admin_fee;
                        dr["TotalAmount"] = item.total_amount;
                        dt.Rows.Add(dr);
                     //   Console.WriteLine("id: {0}, name: {1}", item.id, item.name);
                    }
                }
 

                if (myDeserializedClass.tpt != null)
                {
                    foreach (var item in myDeserializedClass.tpt)
                    {
                        dr = dt.NewRow(); // have new row on each iteration
                        dr["TransactionID"] = item.transaction_id;
                        dr["TransDate"] = item.created_at;
                        dr["KodeTPT"] = item.mtcn_code;
                        dr["TPTRefNo"] = item.ext_ref;
                        dr["ReceiverName"] = item.receiver_name;
                        dr["AmountTPT"] = item.amount;                       
                        dt.Rows.Add(dr);
                        //   Console.WriteLine("id: {0}, name: {1}", item.id, item.name);
                    }
                }

          
           
            }

            return dt;
        }

        public void getSummary(DateTime date_from, DateTime date_to)
        { 
            string responseCode = "0";
            string terminalId = ApplicationSettings.Database.TerminalID;
            string from_date = "";
            string to_date = "";

            lblSummary.Text = "";
            lblSummary2.Text = "";
            lblSummary3.Text = "";
            lblSummary4.Text = "";
          
              ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls |
                                               SecurityProtocolType.Tls11 |
                                               SecurityProtocolType.Tls12;

                string reqCheckUrl = LV_ZREPORT_URL;

                ASCIIEncoding encoder = new ASCIIEncoding();
                byte[] data = encoder.GetBytes("");

                HttpWebRequest reqCheck = (HttpWebRequest)WebRequest.Create(reqCheckUrl);
                reqCheck.Method = "POST";
                reqCheck.Credentials = CredentialCache.DefaultCredentials;
                reqCheck.Accept = "text/json";

                reqCheck.Headers["Authorization"] = "PFM";

                reqCheck.UserAgent = USER_AGENT;
                reqCheck.ContentType = "application/json";

                string requestBody = string.Format("{{\"store_code\":\"{0}\",\"data_area\":\"{1}\",\"terminal_id\":\"{2}\",\"from_date\":\"{3}\",\"to_date\":\"{4}\",\"operator_id\":\"{5}\"}}", ApplicationSettings.Database.StoreID, ApplicationSettings.Database.DATAAREAID, terminalId, date_from.ToString("yyyy-MM-dd"), date_to.ToString("yyyy-MM-dd"), ApplicationSettings.Terminal.TerminalOperator.OperatorId);
                byte[] byteArray = Encoding.UTF8.GetBytes(requestBody);

                Stream requestStream = reqCheck.GetRequestStream();
                requestStream.Write(byteArray, 0, byteArray.Length);
                requestStream.Close();

                using (HttpWebResponse resp = (HttpWebResponse)reqCheck.GetResponse())
                {
                    string content = string.Empty;
                    using (var stream = resp.GetResponseStream())
                    {
                        using (var sr = new StreamReader(stream))
                        {
                            content = sr.ReadToEnd();
                        }
                    }
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    dynamic item = serializer.Deserialize<object>(content);

                    responseCode     = item["response_code"].ToString();
                    terminalId       = item["terminal_id"].ToString();
                    amount_pay       = item["amount_pay"].ToString();
                    amount_fee       = item["amount_fee"].ToString();
                    amount_tpt       = item["amount_tpt"].ToString();
                    amount_total_pay = item["amount_total_pay"].ToString();
                    amount_setor     = item["amount_setor"].ToString();

                    from_date = item["from_date"].ToString();
                    to_date   = item["to_date"].ToString();

                    downLine1 = item["downLine1"].ToString();
                    downLine2 = item["downLine2"].ToString();
                    downLine3 = item["downLine3"].ToString();

                    if (responseCode == "00")
                    { 
                        lblSummary.Text  = "Total Payment             :" + amount_pay;

                        lblSummary2.Text = "Total Fee                 :" + amount_fee;

                        lblSummary3.Text = "Total Transaction Payment :" + amount_total_pay;

                        lblSummary4.Text = "Total TPT                 :" + amount_tpt;
                    }
                    else
                    {
                        MessageBox.Show("ada", "Error Check ", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    }
                }
               
        }


        private void btnFilter_Click(object sender, EventArgs e)
        {
            if(dtpTo.Value < dtpFrom.Value)
            {
               dtpTo.Value = dtpFrom.Value;
            }

            transactions = this.getData(dtpFrom.Value, dtpTo.Value);
            this.getSummary(dtpFrom.Value, dtpTo.Value);
            dataGridView1.DataSource = transactions;

            dataGridView1.AutoResizeColumns();

            dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
        }

        private void timer_location_Tick(object sender, EventArgs e)
        {
       
        }

        private void btn_printZ_Click(object sender, EventArgs e)
        {
            string responseCode = "0";
            string terminalId = ApplicationSettings.Database.TerminalID;
            string from_date = "";
            string to_date = "";


            if (dtpTo.Value < dtpFrom.Value)
            {
                dtpTo.Value = dtpFrom.Value;
            }
        
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls |
                                               SecurityProtocolType.Tls11 |
                                               SecurityProtocolType.Tls12;

                string reqCheckUrl = LV_ZREPORT_URL;

                ASCIIEncoding encoder = new ASCIIEncoding();
                byte[] data = encoder.GetBytes("");

                HttpWebRequest reqCheck = (HttpWebRequest)WebRequest.Create(reqCheckUrl);
                reqCheck.Method = "POST";
                reqCheck.Credentials = CredentialCache.DefaultCredentials;
                reqCheck.Accept = "text/json";

                reqCheck.Headers["Authorization"] = "PFM";

                reqCheck.UserAgent = USER_AGENT;
                reqCheck.ContentType = "application/json";

                string requestBody = string.Format("{{\"store_code\":\"{0}\",\"data_area\":\"{1}\",\"terminal_id\":\"{2}\",\"from_date\":\"{3}\",\"to_date\":\"{4}\",\"operator_id\":\"{5}\"}}", ApplicationSettings.Database.StoreID, ApplicationSettings.Database.DATAAREAID, terminalId, dtpFrom.Value.ToString("yyyy-MM-dd"), dtpTo.Value.ToString("yyyy-MM-dd"), ApplicationSettings.Terminal.TerminalOperator.OperatorId);
                byte[] byteArray = Encoding.UTF8.GetBytes(requestBody);

                Stream requestStream = reqCheck.GetRequestStream();
                requestStream.Write(byteArray, 0, byteArray.Length);
                requestStream.Close();

           //     MessageBox.Show(dtpFrom.Value.ToString("yyyy-MM-dd"), "Alert Payment", MessageBoxButtons.OK);


                using (HttpWebResponse resp = (HttpWebResponse)reqCheck.GetResponse())
                {
                    string content = string.Empty;
                    using (var stream = resp.GetResponseStream())
                    {
                        using (var sr = new StreamReader(stream))
                        {
                            content = sr.ReadToEnd();
                        }
                    }
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    dynamic item = serializer.Deserialize<object>(content);

                    responseCode = item["response_code"].ToString();
                    terminalId   = item["terminal_id"].ToString();
                    amount_pay = item["amount_pay"].ToString();
                    amount_fee = item["amount_fee"].ToString();
                    amount_tpt = item["amount_tpt"].ToString();
                    amount_total_pay = item["amount_total_pay"].ToString();
                    amount_setor = item["amount_setor"].ToString();

                    from_date = item["from_date"].ToString();
                    to_date   = item["to_date"].ToString();
                   
                    downLine1 = item["downLine1"].ToString();
                    downLine2 = item["downLine2"].ToString();
                    downLine3 = item["downLine3"].ToString(); 
         
                    if (responseCode == "00")
                    {
                      //  MessageBox.Show(dtpFrom.Value.ToString("yyyy-MM-dd"), "Alert Payment", MessageBoxButtons.OK);

                        string s = this.ReceiptDocumentFormat(downLine1, downLine2, downLine3, from_date, to_date, terminalId, amount_total_pay, amount_tpt, amount_setor);

                        PrintDocument p = new PrintDocument();
                        PrintDialog pd = new PrintDialog();
                        PaperSize psize = new PaperSize("Custom", 100, Offset + 236);
                        Margins margins = new Margins(0, 0, 0, 0);

                        pd.Document = p;
                        pd.Document.DefaultPageSettings.PaperSize = psize;
                        pd.Document.DefaultPageSettings.Margins = margins;
                        p.DefaultPageSettings.PaperSize.Width = 600;
                        p.PrintPage += delegate(object sender1, PrintPageEventArgs e1)
                        {
                            e1.Graphics.DrawString(s, new Font("Courier New", 8), new SolidBrush(Color.Black), new RectangleF(p.DefaultPageSettings.PrintableArea.Left, 0, p.DefaultPageSettings.PrintableArea.Width, p.DefaultPageSettings.PrintableArea.Height));
                        };

                        try
                        {
                            p.Print();

                            MessageBox.Show("Print Z Love success", "Print Z", MessageBoxButtons.OK);
                        }
                        catch (Exception ex)
                        {
                            throw new Exception("Exception Occured While Printing", ex);
                        } 
                        
                    }
                    else
                    {
                        MessageBox.Show("ada", "Error Check ", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    }
            
        //        } 
            }
        }


        private string ReceiptDocumentFormat(string downLine1, string downLine2, string downLine3, string from_date, string to_date, string terminal_id, string amount_pay, string amount_tpt, string amount_setor)
        {
            string s = "";
            int x = 0;
            int y = 0;
            string spc = "";
            string storeId = ApplicationSettings.Database.StoreID;
            string operator_name = ApplicationSettings.Terminal.TerminalOperator.Name;

            try
            {
                s += "                        Z-REPORT LOVE" + Environment.NewLine + Environment.NewLine;
                s += "             Transdate:" + from_date +" s/d " + to_date  +Environment.NewLine;
                s += "             Terminal Id: " + terminal_id + Environment.NewLine + Environment.NewLine;
                s += "             Details: "  + Environment.NewLine;

                x = 35-22 - amount_pay.Length;
                spc = "";

                for (y = 0; y < x; y++)
                {
                    spc += " ";
                }
                s += "             Amount Total Payment: " + spc + amount_pay + Environment.NewLine;

                x = 35 - 12 - amount_tpt.Length;
                spc = "";
                for (y = 0; y < x; y++)
                {
                    spc += " ";
                }

                s += "             Amount TPT: " +spc+amount_tpt+ Environment.NewLine;

                x = 35 - 14 - amount_setor.Length;
                spc = "";
                for (y = 0; y < x; y++)
                {
                    spc += " ";
                }
                s += "             Amount Setor: "+spc +amount_setor+ Environment.NewLine;

                s += "             -----------------------------------" + Environment.NewLine;

                s += " " + downLine1 + Environment.NewLine +
                     " " + downLine2 + Environment.NewLine +
                     " " + downLine3 + Environment.NewLine;


                Offset = Offset + 260;
            }
            catch (Exception ex)
            {
                throw new Exception("Format Error", ex);
            }

            return s;
        }

        private void dtpTo_ValueChanged(object sender, EventArgs e)
        {

        }

      
    }
}
